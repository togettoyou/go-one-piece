# 程序配置
app:
  # jwt签名秘钥，务必更改
  jwtSecret: 3bf6a2bf959f57a946139521a75acf0d

# 服务配置
server:
  # 开发模式 debug,release,test
  runMode: debug
  # 超时时间/单位s
  readTimeout: 60
  writeTimeout: 60
  # 端口
  httpPort: 8888

# 日志配置
logConfig:
  # 日志记录模式 fatal,panic,dpanic,error,warn,info,debug
  level: info
  # 日志是否记录到文件 true,false
  isFile: false
  # MaxSize 是日志文件在获取之前的最大大小（以兆字节为单位）默认为 100 MB
  maxSize: 100
  # MaxAge 是保留旧日志文件的最大天数
  maxAge: 7
  # MaxBackups 是要保留的最大旧日志文件数
  maxBackups: 10

# mysql配置
# 配置内容参考: https://gorm.io/zh_CN/docs/connecting_to_the_database.html
mysql:
  # 连接驱动
  dsn: root:123456@tcp(127.0.0.1:3306)/db_go_one_server?charset=utf8mb4&parseTime=True&loc=Local
  # 空闲连接池中连接的最大数量
  maxIdle: 10
  # 打开数据库连接的最大数量
  maxOpen: 10
  # 连接可复用的最大时间/单位分钟
  maxLifetime: 60
  # 数据库日志模式 silent,error,warn,info
  logMode: info

casbin:
  # 权限认证日志
  log: true
  # Model存储
  model: |
    [request_definition]
    # 请求规则
    # 访问实体 (Subject)，访问资源 (Object) 和访问方法 (Action)
    r = sub, obj, act

    [policy_definition]
    # 策略规则
    # 访问实体 (Subject)，访问资源 (Object) 和访问方法 (Action)
    p = sub, obj, act

    [role_definition]
    # 角色定义
    # g 是一个 RBAC系统
    # _, _表示角色继承关系的前项和后项，即前项继承后项角色的权限
    g = _, _

    [policy_effect]
    # 策略生效范围
    # 任意一条策略规则满足，则最终结果为 allow
    e = some(where (p.eft == allow))

    [matchers]
    # 匹配器
    # 前三个用来匹配上面定义的请求的规则，最后一个或条件为：如果实体是root直接通过，不验证权限
    m = g(r.sub, p.sub) == true \
                && keyMatch2(r.obj, p.obj) == true \
                && regexMatch(r.act, p.act) == true \
                || r.sub == "root"

# Redis配置
redis:
  # 连接地址
  addr: 127.0.0.1:6379
  # 密码,默认为空
  password: